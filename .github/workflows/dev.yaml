name: build push dev image

on:
  push:
    branches:
      - 'issue1'

jobs:
  testing:
      runs-on: ubuntu-latest
      container:
        image: gsscogs/pythonversiontesting
      strategy:
        matrix:
          python-version: ["3.10"]

      steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install poetry
        # run: |
        #   pip install poetry
        #   poetry export --format requirements.txt --without-hashes -o /requirements.txt
        #   pip install --requirement /requirements.txt
        #   pip install --no-deps --use-feature=in-tree-build /workspace/. 
        run: |
          poetry install
          which python
          mkdir "*/csvcubed-pmd-venv/lib/python3.10/site-packages/behave/formatter"
          bash -c 'export python_dir=$(python -c "import site; print(site.getsitepackages()[0])") && patch -Nf -d "$python_dir/behave/formatter" -p1 < /cucumber-format.patch || true'

      - name: Run pyright
        run: poetry run pyright . --lib

      - name: Run unittests
        run: poetry run pytest --junitxml=pytest_results_pmd.xml

      - name: Run behaviour tests
        # run: poetry run behave tests/features --tags=-skip -o tests/behaviour/test-results.json
        run: poetry run behave tests/features --tags=-skip -f json.cucumber -o tests/behaviour/test-results.json

  dev:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      
      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build pmdutils:dev
        uses: docker/build-push-action@v2
        id: docker_build_dev
        with:
          context: .
          file: deploydocker/Dockerfile
          push: true
          build-args: dev=true
          tags: |
            gsscogs/pmdutils:dev
      - name: Develop Image digest
        run: echo ${{ steps.docker_build_dev.outputs.digest }}