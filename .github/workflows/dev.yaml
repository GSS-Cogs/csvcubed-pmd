name: build push dev image

on:
  push:
    branches:
      - 'main'
  create:
    tag:
  pull_request:
    types:

jobs:
  testing:
    runs-on: ubuntu-latest
    container:
      image: gsscogs/pythonversiontesting
    strategy:
      matrix:
        python-version: ["3.10"]

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install all packages
      run: |
        poetry install
        export python_dir=$(poetry run python -c "import site; print(site.getsitepackages()[0])") && patch -Nf -d "$python_dir/behave/formatter" -p1 < /cucumber-format.patch

    - name: Run pyright
      run: poetry run pyright . --lib

    - name: Run unittests
      if: always()
      run: poetry run pytest --junitxml=pytest_results_pmd.xml

    - name: Upload unittests test results from xml file
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: unitests tests
        path: pytest_results_pmd.xml

    - name: Publish Unit Test Results
      uses: EnricoMi/publish-unit-test-result-action@v1
      if: always()
      with:
        files: "pytest_results_pmd.xml"

    - name: Run behaviour tests
      if: always()
      run: poetry run behave tests/features --tags=-skip --junit

    - name: Remove broken characters from xml test files
    # By removing broken characters from the xml unit/behave test files, we can then publish the tests results stored 
    # in those files in a user friendly way on github actions using 'EnricoMi/publish-unit-test-result-action@v1'.
      if: always()
      run: |
        sed -i -e 's/[\x0A\x1B]//g' reports/TESTS-*.xml
        
    - name: Upload behave test results from xml files
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: behave tests
        path: reports/*.xml

    - name: Publish Behave Test Results
      uses: EnricoMi/publish-unit-test-result-action@v1
      if: always()
      with:
        check_name: "Behave Test Results"
        files: 'reports/*.xml'

  increment_version:
    needs: [testing]
    env:
      GIT_REF: ${{ github.ref }}
    if: ${{ (needs.testing.result=='success') && startsWith(github.ref, 'refs/tags/v') }}
    # Step 1. Set up operating system
    runs-on: ubuntu-latest
    container:
      image: gsscogs/pythonversiontesting
    strategy:
      matrix:
        python-version: ["3.10"]
    steps:
      # Check-out repository so we can access its contents
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Update pyproject.toml version from latest tag
        run: |
          poetry version $(echo $GIT_REF | sed -e 's/^.*\/v\(.*\)/\1/')
      - name: Tell git who we are
        run: |
          git config --global user.email "none@none.com"
          git config --global user.name "Auto-version-incrementer"
      - name: Commit auto-incrementer changes to existing tag
        run: |
         git config --global safe.directory '*' # To suppress  fatal: detected dubious ownership in repository at ...
         git add pyproject.toml
          git commit -m "Updating the release version in pyproject.toml"
          git tag -f $(echo $GIT_REF | sed -e 's/^.*\/v\(.*\)/v\1/')
      - name: Push tag changes back to origin
        run: git push -f origin $(echo $GIT_REF | sed -e 's/^.*\/v\(.*\)/v\1/')


  release:
    if: ${{ (needs.testing.result=='success') && startsWith(github.ref, 'refs/tags/v') }}
    needs: [increment_version]
    runs-on: ubuntu-latest
    steps:

      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      
      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: get_tag_version
        id: get_version
        uses: battila7/get-version-action@v2

      - name: Build pmdutils:dev
        uses: docker/build-push-action@v2
        id: docker_build_dev
        with:
          context: .
          file: deploydocker/Dockerfile
          push: true
          build-args: dev=true
          tags: |
            gsscogs/pmdutils:latest
            gsscogs/pmdutils:${{ steps.get_version.outputs.version-without-v }}
      - name: Develop Image digest
        run: echo ${{ steps.docker_build_dev.outputs.digest }}